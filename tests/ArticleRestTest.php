<?php

namespace App\Tests;


use ApiPlatform\Symfony\Bundle\Test\ApiTestCase;
use Hautelook\AliceBundle\PhpUnit\RefreshDatabaseTrait;
use App\Entity\Article;

class ArticleRestTest extends ApiTestCase
{
    use RefreshDatabaseTrait;

    public function testGetCollection(): void
    {
        // The client implements Symfony HttpClient's `HttpClientInterface`, and the response `ResponseInterface`
        $response = static::createClient()->request('GET', '/api/articles');

        $this->assertResponseIsSuccessful();

        // Because test fixtures are automatically loaded between each test, you can assert on them
        $this->assertJsonContains([
            'hydra:totalItems' => 100
        ]);

        $this->assertMatchesResourceCollectionJsonSchema(Article::class);
    }

    public function testCreateArticle(): void
    {
        $response = static::createClient()->request('POST', '/api/articles',
            ['json' =>
                [
                    'title' => 'title',
                    'slug' => 'slug-article',
                    'content' => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. ',
                    'introduction' => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',
                    'file' => file_get_contents(__DIR__ . '/mockFile')
                ]
            ]);

        $this->assertResponseStatusCodeSame(201);
        $this->assertJsonContains([
            'title' => 'title',
            'slug' => 'slug-article',
            'content' => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. ',
            'introduction' => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',
            'file' => null
        ]);
        $this->assertMatchesResourceItemJsonSchema(Article::class);
    }

    public function testCreateInvalidBook(): void
    {
        static::createClient()->request('POST', '/api/articles', ['json' => [
            'title' => 'Molestiae amet quaerat id sed architecto voluptatem quibusdam. Perferendis quisquam error totam voluptatem blanditiis itaque. Vel sed quaerat rerum possimus officiis. Expedita hic voluptatem sed. Aspernatur magnam sunt assumenda et ducimus est. Esse corrupti voluptatum nihil aut eos aliquam. Velit eos fugit sequi ut quaerat voluptatem cumque sit. Minima et sint ea veniam voluptates harum.',
            'slug' => 'slug',
            'content' => 'content'
        ]]);

        $this->assertResponseStatusCodeSame(400);
    }

    public function testUpdateBook(): void
    {
        $client = static::createClient();
        // findIriBy allows to retrieve the IRI of an item by searching for some of its properties.
        // ISBN 9786644879585 has been generated by Alice when loading test fixtures.
        // Because Alice use a seeded pseudo-random number generator, we're sure that this ISBN will always be generated.
        $iri = $this->findIriBy(Article::class, ['slug' => 'nostrum-non-et-et-et']);

        $client->request('PUT', $iri, ['json' => [
            'introduction' => 'updated introduction',
            'content' => 'updated content'
        ]]);

        $this->assertResponseIsSuccessful();
        $this->assertJsonContains([
            'introduction' => 'updated introduction',
            'content' => 'updated content'
        ]);
    }

    public function testDeleteBook(): void
    {
        $client = static::createClient();
        $iri = $this->findIriBy(Article::class, ['slug' => 'nostrum-non-et-et-et']);

        $client->request('DELETE', $iri);

        $this->assertResponseStatusCodeSame(204);
        $this->assertNull(
        // Through the container, you can access all your services from the tests, including the ORM, the mailer, remote API clients...
            static::getContainer()->get('doctrine')->getRepository(Article::class)->findOneBy(['slug' => '9781344037075'])
        );
    }
}
